<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><docs>https://blogs.law.harvard.edu/tech/rss</docs><title>ubuntu on Bryan Apperson</title><link>https://bryanapperson.com/tags/ubuntu/</link><description>Recent content in ubuntu on Bryan Apperson</description><image><title>ubuntu on Bryan Apperson</title><link>https://bryanapperson.com/tags/ubuntu/</link><url>https://source.unsplash.com/collection/983219/2000x1322</url></image><ttl>1440</ttl><generator>Hugo 0.81.0</generator><language>en-US</language><copyright>Copyright &amp;copy; Bryan Apperson. Licensed under CC-BY-ND-4.0. Hosted on Github.</copyright><lastBuildDate>Sun, 18 Apr 2021 20:56:59 UT</lastBuildDate><atom:link href="https://bryanapperson.com/tags/ubuntu/index.xml" rel="self" type="application/rss+xml"/><item><title>Install HHVM, Nginx on Ubuntu 14.04 - Make WordPress Fly</title><link>https://bryanapperson.com/blog/install-hhvm-nginx-on-ubuntu-14-04-make-wordpress-fly/</link><pubDate>Tue, 18 Feb 2020 00:12:01 UT</pubDate><dc:creator>Bryan Apperson</dc:creator><guid>https://bryanapperson.com/blog/install-hhvm-nginx-on-ubuntu-14-04-make-wordpress-fly/</guid><description>Installing HHVM and Nginx on Ubuntu 14.04 is the next step in the &amp;ldquo;Make WordPress Fly&amp;rdquo; series. This tutorial assumes you have completed the prerequisites, read Part 1 and completed Part 2 of this guide. At this point you have a reasonably secure box with MariaDB installed and configured. In this (Part 3) of the &amp;ldquo;Make WordPress Fly&amp;rdquo; guide we will start out by preparing our system for Nginx. The first step is to reconnect to your VM via SSH.</description><content:encoded><![CDATA[Installing HHVM and Nginx on Ubuntu 14.04 is the next step in the &amp;ldquo;Make WordPress Fly&amp;rdquo; series. This tutorial assumes you have completed the prerequisites, read Part 1 and completed Part 2 of this guide. At this point you have a reasonably secure box with MariaDB installed and configured. In this (Part 3) of the &amp;ldquo;Make WordPress Fly&amp;rdquo; guide we will start out by preparing our system for Nginx. The first step is to reconnect to your VM via SSH.
ssh -p port user@you.rip.add.res
Installing Nginx on Ubuntu 14.04 After reconnecting we are going to install some prerequisites in this order to make sure HHVM plays nicely with Nginx and WordPress.
sudo apt-get update sudo apt-get install php5-gd libssh2-php After that process completes it is time to install Nginx. Installing Nginx on Ubuntu 14.04 is a very easy process. Ubuntu official repos come with a Nginx package but I prefer using launchpad repo maintained by Nginx team. We will also install the Naxsi WAF (Web Application Firewall) to provide some added security. You can choose not load Naxsi later as it slows down cached requests per second by around 3%. However, a full fledged WAF is worth a 3% requests per second hit.
sudo add-apt-repository ppa:nginx/stable sudo apt-get update sudo apt-get install nginx-naxsi If you prefer to use Nginx package in Ubuntu repo, you can simply run following command:
sudo apt-get install nginx-naxsi
That concludes the process of installing Nginx. We will configure it further in later parts of this tutorial series based on whether you use WordPress Multisite or a single install.
Installing HHVM on Ubuntu 14.04 Let&amp;rsquo;s move on to installing HHVM on Ubuntu 14.04. We&amp;rsquo;ll need to prepare the HHVM repositories. Using sudo or as root user it is recommended to run sudo apt-get update and sudo apt-get upgrade first, or you may receive errors. Then we are ready to add the repositories and install HHVM.
wget -O - http://dl.hhvm.com/conf/hhvm.gpg.key | sudo apt-key add - echo deb http://dl.hhvm.com/ubuntu trusty main | sudo tee /etc/apt/sources.list.d/hhvm.list sudo apt-get update sudo apt-get install hhvm Now that HHVM is installed there are a few simple configurations to apply. HHVM comes bundled with a script that makes setting it up with Ubuntu very easy. If you are already using Nginx with PHP-FPM, you&amp;rsquo;ll have to modify the configuration file to disable the use of PHP-FPM. This file is normally located at /etc/nginx/sites-available/default Look for the following section and make sure it&amp;rsquo;s all commented (by adding a # at the beginning of each line)
# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \.php$ { # fastcgi_split_path_info ^(.&#43;\.php)(/.&#43;)$; # # NOTE: You should have &amp;quot;cgi.fix_pathinfo = 0;&amp;quot; in php.ini # # # With php5-cgi alone: # fastcgi_pass 127.0.0.1:9000; # # With php5-fpm: # fastcgi_pass unix:/var/run/php5-fpm.sock; # fastcgi_index index.php; # include fastcgi_params; #} After doing this, execute the following script:
/usr/share/hhvm/install_fastcgi.sh Executing this script configures Nginx to start using HHVM to process the PHP code. It&amp;rsquo;ll also restart the Nginx server so you don&amp;rsquo;t have to do anything else. Then you may want to tweak the max_upload_size of HHVM by editing /etc/hhvm/php.ini. Otherwise HHVM is now setup and working.
Verifying that HHVM is Working Correctly With Nginx and Ubuntu 14.04 It is important verify that HHVM is working with Nginx. You can verify this by creating a file in /usr/share/nginx/html called test.php. Paste this inside:
&amp;lt;?php echo defined(&#39;HHVM\_VERSION&#39;)?&#39;Using HHVM&#39;:&#39;Not using HHVM&#39;; ?&amp;gt; Visit http://you.rip.add.res/test.php to view the output. This will verify that HHVM is handling PHP. Now just make sure that HHVM and Nginx run by default at startup.
sudo update-rc.d nginx defaults sudo update-rc.d hhvm defaults You are ready to move on to the next part of this tutorial.
]]></content:encoded></item><item><title>Installing WordPress with Nginx on Ubuntu 14.04</title><link>https://bryanapperson.com/blog/installing-wordpress-with-nginx-on-ubuntu-14-04/</link><pubDate>Mon, 17 Feb 2020 23:10:08 UT</pubDate><dc:creator>Bryan Apperson</dc:creator><guid>https://bryanapperson.com/blog/installing-wordpress-with-nginx-on-ubuntu-14-04/</guid><description>Installing WordPress with Nginx on Ubuntu 14.04 is a fairly straightforward task. In this tutorial we will do over how to do it. This tutorial assumes you have completed the Getting Started with an Ubuntu VPS guide and have an Ubuntu 14.04 VPS (if not you can get one at vultr). It also assumes that you already have a LEMP stack setup (Linux, Nginx, MySQL, etcetera) or you are following the WordPress HHVM guide.</description><content:encoded><![CDATA[Installing WordPress with Nginx on Ubuntu 14.04 is a fairly straightforward task. In this tutorial we will do over how to do it. This tutorial assumes you have completed the Getting Started with an Ubuntu VPS guide and have an Ubuntu 14.04 VPS (if not you can get one at vultr). It also assumes that you already have a LEMP stack setup (Linux, Nginx, MySQL, etcetera) or you are following the WordPress HHVM guide. This tutorial assumes the use of Nginx as the web server, Fastcgi or HHVM for PHP and either MariaDB or MySQL for your MySQL server. The first step in this tutorial is to connect to your virtual machine via SSH. This tutorial assumes that you are using Linux as your operating system and have SSH installed. If you do not you can use a tool like Putty for SSH. In Linux you just need to run the following command:
ssh -p port user@you.rip.add.res After connecting to your instance via SSH it is time to begin the process of installing WordPress to work with Nginx. All of our tutorials for Nginx assume a &amp;ldquo;web root&amp;rdquo; of /var/www/html, make sure that your Nginx configuration points there and that the directory exists. If the directory does not exist create it using mkdir and chown it to www-data .
sudo mkdir /var/www/ sudo mkdir /var/www/html/ sudo chown -R www-data:www-data /var/www/html/ Creating a Database and User After you have confirmed that Nginx is using /var/www/html/ as your web root or setup another of your choice, it&amp;rsquo;s time to create a database for WordPress. Please make sure you have already setup MySQL or MariaDB prior to this step. Setting up the database is easy. Start by logging into an interactive session with the MySQL administrative account.
mysql -u root -p You will be prompted for the root password you setup during MySQL installation. Enter it and proceed to the interactive prompt. Next we are going to create a database for WordPress to use and store information in. The name of the database does not matter, but it should be memorable so that you can distinguish it as you add additional databases later on. To do this simply run this command:
CREATE DATABASE wordpress; Note the semi-colon (;) that ends the MySQL statement. Every MySQL statement must end with one, so check that if you are running into issues. Now that you have created a database, we need to create a user. You are going to use the same interactive interface you are in now to create a user. Use this command:
CREATE USER wordpressuser@localhost IDENTIFIED BY &#39;password&#39;; Make sure you replace &amp;lsquo;password&amp;rsquo; with the database password you want to use and &amp;lsquo;wordpressuser&amp;rsquo; with the name of the database user you want to create. After that is done you need to assign that user privileges to use the database we just created. Use this command:
GRANT ALL PRIVILEGES ON wordpress.\* TO wordpressuser@localhost; Make sure you replace the database name and username with the ones you created. Everything should now be configured correctly. We need to flush the privileges (save them to disk) so that our current instance of MySQL knows about the privilege changes we have made:
FLUSH PRIVILEGES; Now you can exit MySQL:
exit
At this point you are back at the shell command prompt and ready to continue.
Installing WordPress with Nginx on Ubuntu 14.04 The next step is to download the latest version of WordPress to the server. It is available on their website. We are going to use the wget command to copy it to our home directory. WordPress always keeps the latest stable version at the place we will use in this command.
cd ~ wget http://wordpress.org/latest.tar.gz The files which compose WordPress were downloaded as a compressed archive stored in a file called latest.tar.gz. We can extract the contents by typing:
tar xzvf latest.tar.gz This will extract a directory called wordpress containing all the files we need to set up WordPress. First however make sure that php5-gd and libssh2-php are installed. If they are not, run the command below. This will make sure you can work with images and install modules/plugins over SSH.
sudo apt-get update sudo apt-get install php5-gd libssh2-php Configuring WordPress with Nginx on Ubuntu 14.04 Now we are ready to configure WordPress and move it into the web root. Let&amp;rsquo;s move into the directory that we extracted WordPress to in the last section:
cd ~/wordpress Now we want to copy the sample configuration to take the place of the non-existent main configuration.
cp wp-config-sample.php wp-config.php
Next we need to make 3 small changes to wp-config.php using nano or your text editor of choice.
nano wp-config.php
The file is suitable for launching WordPress; it is just lacking the information to connect to the database we created a few minutes ago. The parameters we need to set are DB_NAME , DB_USER , and DB_PASSWORD . After you make the changes to that section of the file it should look something like this:
// ** MySQL settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define(&#39;DB_NAME&#39;, &#39;wordpress&#39;); /** MySQL database username */ define(&#39;DB_USER&#39;, &#39;wordpressuser&#39;); /** MySQL database password */ define(&#39;DB_PASSWORD&#39;, &#39;password&#39;); For now you can ignore the rest of the site. If you are planning on deploying a multisite network add this line:
/* Multisite */ define( &amp;lsquo;WP_ALLOW_MULTISITE&amp;rsquo;, true );
Once you have made these changes you can save and close the file. Now it is time to copy the files to our web root (/var/www/html/ in this example). We can copy the files to this place by typing:
sudo rsync -avP ~/wordpress/ /var/www/html/ Now we need to move over to that folder to assign some permissions.
cd /var/www/html/ Then we are going to make sure that Nginx owns these files so that it can manipulate them.
sudo chown -R www-data:www-data /var/www/html/*
Before we move on, we should create a new directory for user uploads:
mkdir wp-content/uploads The new directory should have group writing set already, but the new directory isn&amp;rsquo;t assigned with www-data group ownership yet. Let&amp;rsquo;s fix that:
sudo chown -R :www-data /var/www/html/wp-content/uploads Now just make sure that your web server is configured to use /var/www/html/ as the webroot and you can visit yourdomain.com to set your site name and get started. You are also going to want to install Postfix so that WordPress can send emails. We will be writing a tutorial for that in the near future. Thanks for reading and leave your thoughts in the comments below.
]]></content:encoded></item><item><title>Setup OpenVPN on Ubuntu the Easy Way</title><link>https://bryanapperson.com/blog/setup-openvpn-on-ubuntu-the-easy-way/</link><pubDate>Mon, 17 Feb 2020 21:03:31 UT</pubDate><dc:creator>Bryan Apperson</dc:creator><guid>https://bryanapperson.com/blog/setup-openvpn-on-ubuntu-the-easy-way/</guid><description>The best way to setup OpenVPN on Ubuntu, like many other things, is to script it. This way it&amp;rsquo;s easier to create uniform deployment across larger networks. So, this is how you setup OpenVPN on Ubuntu the easy way - this neat little script makes installing OpenVPN on an Ubuntu VPS simple:
Go to your home directory:
cd ~ Then create a file by running this command:
cat &amp;gt; openvpn.sh #!</description><content:encoded><![CDATA[The best way to setup OpenVPN on Ubuntu, like many other things, is to script it. This way it&amp;rsquo;s easier to create uniform deployment across larger networks. So, this is how you setup OpenVPN on Ubuntu the easy way - this neat little script makes installing OpenVPN on an Ubuntu VPS simple:
Go to your home directory:
cd ~ Then create a file by running this command:
cat &amp;gt; openvpn.sh #!/usr/bin/env bash # # Functions ok() { echo -e &amp;#39;\e[32m&amp;#39;$1&amp;#39;\e[m&amp;#39;; } die() { echo -e &amp;#39;\e[1;31m&amp;#39;$1&amp;#39;\e[m&amp;#39;; exit 1; } # Sanity check if [[ $(id -g) != &amp;#34;0&amp;#34; ]] ; then die &amp;#34;❯❯❯ Script must be run as root.&amp;#34; fi if [[ ! -e /dev/net/tun ]] ; then die &amp;#34;❯❯❯ TUN/TAP device is not available.&amp;#34; fi dpkg -l openvpn &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 if [[ $? -eq 0 ]]; then die &amp;#34;❯❯❯ OpenVPN is already installed.&amp;#34; fi # Install openvpn ok &amp;#34;❯❯❯ apt-get update&amp;#34; apt-get update -q &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 ok &amp;#34;❯❯❯ apt-get install openvpn curl openssl&amp;#34; apt-get install -qy openvpn curl &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 # IP Address SERVER_IP=$(curl ipv4.icanhazip.com) if [[ -z &amp;#34;${SERVER_IP}&amp;#34; ]]; then SERVER_IP=$(ip a | awk -F&amp;#34;[ /]&#43;&amp;#34; &amp;#39;/global/ &amp;amp;&amp;amp; !/127.0/ {print $3; exit}&amp;#39;) fi # Generate CA Config ok &amp;#34;❯❯❯ Generating CA Config&amp;#34; openssl dhparam -out /etc/openvpn/dh.pem 2048 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 openssl genrsa -out /etc/openvpn/ca-key.pem 2048 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 chmod 600 /etc/openvpn/ca-key.pem openssl req -new -key /etc/openvpn/ca-key.pem -out /etc/openvpn/ca-csr.pem -subj /CN=OpenVPN-CA/ &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 openssl x509 -req -in /etc/openvpn/ca-csr.pem -out /etc/openvpn/ca.pem -signkey /etc/openvpn/ca-key.pem -days 365 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 echo 01 &amp;gt; /etc/openvpn/ca.srl # Generate Server Config ok &amp;#34;❯❯❯ Generating Server Config&amp;#34; openssl genrsa -out /etc/openvpn/server-key.pem 2048 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 chmod 600 /etc/openvpn/server-key.pem openssl req -new -key /etc/openvpn/server-key.pem -out /etc/openvpn/server-csr.pem -subj /CN=OpenVPN/ &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 openssl x509 -req -in /etc/openvpn/server-csr.pem -out /etc/openvpn/server-cert.pem -CA /etc/openvpn/ca.pem -CAkey /etc/openvpn/ca-key.pem -days 365 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 cat &amp;gt; /etc/openvpn/udp1194.conf &amp;lt; /dev/null 2&amp;gt;&amp;amp;1 chmod 600 /etc/openvpn/client-key.pem openssl req -new -key /etc/openvpn/client-key.pem -out /etc/openvpn/client-csr.pem -subj /CN=OpenVPN-Client/ &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 openssl x509 -req -in /etc/openvpn/client-csr.pem -out /etc/openvpn/client-cert.pem -CA /etc/openvpn/ca.pem -CAkey /etc/openvpn/ca-key.pem -days 36525 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 cat &amp;gt; /etc/openvpn/client.ovpn &amp;lt; $(cat /etc/openvpn/client-key.pem) $(cat /etc/openvpn/client-cert.pem) $(cat /etc/openvpn/ca.pem) EOF # Iptables if [[ ! -f /proc/user_beancounters ]]; then N_INT = $(ip a |awk -v sip=&amp;#34;$SERVER_IP&amp;#34; &amp;#39;$0 ~ sip { print $7}&amp;#39;) iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o $N_INT -j MASQUERADE else iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to-source $SERVER_IP fi iptables-save &amp;gt; /etc/iptables.conf cat &amp;gt; /etc/network/if-up.d/iptables &amp;lt; /proc/sys/net/ipv4/ip_forward # Restart Service ok &amp;#34;❯❯❯ service openvpn restart&amp;#34; service openvpn restart &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 ok &amp;#34;❯❯❯ Your client config is available at /etc/openvpn/client.ovpn&amp;#34; ok &amp;#34;❯❯❯ All done!&amp;#34;&amp;lt;/pre&amp;gt; Press CTRL&#43;D to save. Then:
chmod 755 openvpn.sh This simple script will got OpenVPN installed and working on your VM or box easily. OpenVPN is a great way to connect to a work network, remain private, and encrypt your endpoint.
In just a few seconds you are all set, the script will automatically install OpenVPN and all the necessary dependencies, configure, and add a new user. Then just connect via SFTP and download the files to connect. Place them in the OpenVPN config directory on Windows or setup the values to match on a linux desktop.
OpenVPN is a very secure tunnel and I highly recommend it. I get near native speed running OpenVPN on a 512MB RAM Ubuntu 14.04 VM.
]]></content:encoded></item><item><title>MariaDB 10.1 Setup for Ubuntu 14.04 - Make WordPress Fly</title><link>https://bryanapperson.com/blog/mariadb-10-1-setup-for-ubuntu-14-04-make-wordpress-fly/</link><pubDate>Mon, 17 Feb 2020 20:35:53 UT</pubDate><dc:creator>Bryan Apperson</dc:creator><guid>https://bryanapperson.com/blog/mariadb-10-1-setup-for-ubuntu-14-04-make-wordpress-fly/</guid><description>In this tutorial we will cover optimal MariaDB 10.1 setup for Ubuntu 14.04 on a VM with 2-4GB of RAM. This is part 2 of the &amp;ldquo;Make WordPress Fly&amp;rdquo; tutorial. You can find part 1 here. Part 1 covered the benefits of using HHVM, MariaDB, Nginx and Ubuntu 14.04 to run a WordPress website. In this section we&amp;rsquo;ll be digging in to MariaDB and the optimal configurations for it. This tutorial assumes you have a VM with at least 512MB of RAM, 1 Xeon Core, 10 GB HDD and Vanilla Ubuntu 14.</description><content:encoded><![CDATA[In this tutorial we will cover optimal MariaDB 10.1 setup for Ubuntu 14.04 on a VM with 2-4GB of RAM. This is part 2 of the &amp;ldquo;Make WordPress Fly&amp;rdquo; tutorial. You can find part 1 here. Part 1 covered the benefits of using HHVM, MariaDB, Nginx and Ubuntu 14.04 to run a WordPress website. In this section we&amp;rsquo;ll be digging in to MariaDB and the optimal configurations for it. This tutorial assumes you have a VM with at least 512MB of RAM, 1 Xeon Core, 10 GB HDD and Vanilla Ubuntu 14.04 installed and ideally secured. So, assuming you have your Ubuntu VPS all setup, we will proceed with the fairly straightforward process of installing MariaDB on Ubuntu 14.04. We are specifically going to be deploying MariaDB 10.1 which as discussed in part 1 has significant performance benefits over even the newest versions on MySQL. First, connect to your VM via SSH.
ssh -p port user@you.rip.add.res
Then we&amp;rsquo;ll add the MariaDB 10.1 repository and install the prerequisites.
sudo apt-get install software-properties-common sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db sudo add-apt-repository &#39;deb http://ftp.osuosl.org/pub/mariadb/repo/10.1/ubuntu trusty main&#39; Once the key is imported and the repository added we will install MariaDB.
sudo apt-get update sudo apt-get install mariadb-server During that process you will be prompted to create a root password for MariaDB. Make sure that you store it in a safe place. Consider using KeePass (or a similar utility) for test passwords, it creates strong passwords you can review later and encrypts them with a master key. Now that MariaDB is installed we need to make sure it runs on startup.
sudo update-rc.d mysql defaults Then, run the sudo mysql_secure_installation. This will guide you through some procedures that will remove some defaults which are dangerous to use in a production environment.
Next we will want to check that everything looks good in the my.cnf file.
nano /etc/mysql/my.cnf It looks like this, yours should be similar, it may be a bit different as MariaDB does some system based configuration on installation.
socket	= /var/run/mysqld/mysqld.sock nice	= 0 [mysqld] # # * Basic Settings # user	= mysql pid-file	= /var/run/mysqld/mysqld.pid socket	= /var/run/mysqld/mysqld.sock port	= 3306 basedir	= /usr datadir	= /var/lib/mysql tmpdir	= /tmp lc_messages_dir	= /usr/share/mysql lc_messages	= en_US skip-external-locking # # Instead of skip-networking the default is now to listen only on # localhost which is more compatible and is not less secure. bind-address	= 127.0.0.1 # # * Fine Tuning # max_connections	= 100 connect_timeout	= 5 wait_timeout	= 600 max_allowed_packet	= 16M thread_cache_size = 128 sort_buffer_size	= 4M bulk_insert_buffer_size	= 16M tmp_table_size	= 32M max_heap_table_size	= 32M # # * MyISAM # # This replaces the startup script and checks MyISAM tables if needed # the first time they are touched. On error, make copy and try a repair. myisam_recover = BACKUP key_buffer_size	= 128M #open-files-limit	= 2000 table_open_cache	= 400 myisam_sort_buffer_size	= 512M concurrent_insert	= 2 read_buffer_size	= 2M read_rnd_buffer_size	= 1M # # * Query Cache Configuration # # Cache only tiny result sets, so we can fit more in the query cache. query_cache_limit	= 128K query_cache_size	= 64M # for more write intensive setups, set to DEMAND or OFF #query_cache_type	= DEMAND # # * Logging and Replication # # Both location gets rotated by the cronjob. # Be aware that this log type is a performance killer. # As of 5.1 you can enable the log at runtime! #general_log_file = /var/log/mysql/mysql.log #general_log = 1 # # Error logging goes to syslog due to /etc/mysql/conf.d/mysqld_safe_syslog.cnf. # # we do want to know about network errors and such log_warnings	= 2 # # Enable the slow query log to see queries with especially long duration #slow_query_log[={0|1}] slow_query_log_file	= /var/log/mysql/mariadb-slow.log long_query_time = 10 #log_slow_rate_limit	= 1000 log_slow_verbosity	= query_plan #log-queries-not-using-indexes #log_slow_admin_statements # # The following can be used as easy to replay backup logs or for replication. # note: if you are setting up a replication slave, see README.Debian about # other settings you may need to change. #server-id	= 1 #report_host	= master1 #auto_increment_increment = 2 #auto_increment_offset	= 1 log_bin	= /var/log/mysql/mariadb-bin log_bin_index	= /var/log/mysql/mariadb-bin.index # not fab for performance, but safer #sync_binlog	= 1 expire_logs_days	= 10 max_binlog_size = 100M # slaves #relay_log	= /var/log/mysql/relay-bin #relay_log_index	= /var/log/mysql/relay-bin.index #relay_log_info_file	= /var/log/mysql/relay-bin.info #log_slave_updates #read_only # # If applications support it, this stricter sql_mode prevents some # mistakes like inserting invalid dates etc. #sql_mode	= NO_ENGINE_SUBSTITUTION,TRADITIONAL # # * InnoDB # # InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/. # Read the manual for more InnoDB related options. There are many! default_storage_engine	= InnoDB # you can&amp;#39;t just change log file size, requires special procedure #innodb_log_file_size	= 50M innodb_buffer_pool_size	= 256M innodb_log_buffer_size	= 8M innodb_file_per_table	= 1 innodb_open_files	= 400 innodb_io_capacity	= 400 innodb_flush_method	= O_DIRECT # # * Security Features # # Read the manual, too, if you want chroot! # chroot = /var/lib/mysql/ # # For generating SSL certificates I recommend the OpenSSL GUI &amp;#34;tinyca&amp;#34;. # # ssl-ca=/etc/mysql/cacert.pem # ssl-cert=/etc/mysql/server-cert.pem # ssl-key=/etc/mysql/server-key.pem [mysqldump] quick quote-names max_allowed_packet	= 16M [mysql] #no-auto-rehash	# faster start of mysql but no tab completition [isamchk] key_buffer	= 16M # # * IMPORTANT: Additional settings that can override those from this file! # The files must end with &amp;#39;.cnf&amp;#39;, otherwise they&amp;#39;ll be ignored. # !includedir /etc/mysql/conf.d/&amp;lt;/pre&amp;gt; Performance can be tweaked a bit once we&amp;rsquo;ve had the WordPress site up and running for 24-48 hours by using mysqltuner.pl. For good measure restart the service.
sudo service mysql restart
This concludes part 2 of the guide &amp;ldquo;MariaDB Setup for Ubuntu 14.04 - Make WordPress Fly&amp;rdquo;. As the rest of the guide is released links will be posted here and on all of the articles in the tutorial.
]]></content:encoded></item><item><title>HHVM, MariaDB and Nginx Make WordPress Fly - Intro</title><link>https://bryanapperson.com/blog/hhvm-mariadb-and-nginx-make-wordpress-fly-intro/</link><pubDate>Mon, 17 Feb 2020 20:17:30 UT</pubDate><dc:creator>Bryan Apperson</dc:creator><guid>https://bryanapperson.com/blog/hhvm-mariadb-and-nginx-make-wordpress-fly-intro/</guid><description>HHVM, MariaDB and Nginx Make WordPress fly (seriously). This site is running on what may the fastest possible software stack for WordPress. That stack is HHVM, MariaDB 10.1, Nginx and Ubuntu 14.04. As you are browsing this site you may notice that it is graphically intensive. It also leverages many CPU hungry plugins that would make it take 6-10 seconds to load on even good shared hosting. With this aforementioned software stack pages up to 5MB on this site still load in under a second, end-user pipe permitting.</description><content:encoded><![CDATA[HHVM, MariaDB and Nginx Make WordPress fly (seriously). This site is running on what may the fastest possible software stack for WordPress. That stack is HHVM, MariaDB 10.1, Nginx and Ubuntu 14.04. As you are browsing this site you may notice that it is graphically intensive. It also leverages many CPU hungry plugins that would make it take 6-10 seconds to load on even good shared hosting. With this aforementioned software stack pages up to 5MB on this site still load in under a second, end-user pipe permitting. This is all happening on a VPS with 2 x 2.26Ghz cores and 2GB of RAM. Not only that but this stack can serve over 1000 2MB WordPress pages per second without losing stability:
AB BenchMark [user@host ~]# ab -c 50 -n 5000 http://bryanapperson.com/ This is ApacheBench, Version 2.3 &amp;lt;$Revision: 655654 $&amp;gt; Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/ Benchmarking bryanapperson.com (be patient) Completed 500 requests Completed 1000 requests Completed 1500 requests Completed 2000 requests Completed 2500 requests Completed 3000 requests Completed 3500 requests Completed 4000 requests Completed 4500 requests Completed 5000 requests Finished 5000 requests Server Software: nginx Server Hostname: bryanapperson.com Server Port: 80 Document Path: / Document Length: 16138 bytes Concurrency Level: 50 Time taken for tests: 3.916 seconds Complete requests: 5000 Failed requests: 0 Write errors: 0 Total transferred: 83046606 bytes HTML transferred: 80706138 bytes Requests per second: 1276.68 \[#/sec\](mean) Time per request: 39.164 \[ms\](mean) Time per request: 0.783 \[ms\] (mean, across all concurrent requests) Transfer rate: 20707.77 \[Kbytes/sec\] received Connection Times (ms) min mean\[&#43;/-sd\] median max Connect: 1 1 0.2 1 5 Processing: 12 38 8.1 37 88 Waiting: 11 37 8.1 36 87 Total: 14 39 8.1 38 89 Percentage of the requests served within a certain time (ms) 50% 38 66% 41 75% 43 80% 44 90% 49 95% 54 98% 60 99% 66 100% 89 (longest request) Why HHVM for WordPress? So you may be asking yourself, is that really possible? Yes, HHVM and WordPress work very well together. If you asked me a few days ago I might have said no. But after playing around with HHVM, also known as &amp;ldquo;Hip Hop for PHP&amp;rdquo;, it is. HHVM is Facebook&amp;rsquo;s production PHP server which has now gone open source. At this point it still has a few compatibility issues. Especially with the usual culprits like Ioncube. However it works very well with WordPress 3.9&#43;. When combined with Nginx, MariaDB and Ubuntu &amp;ldquo;Trust Tahr&amp;rdquo; you get a pretty unbeatable platform for WordPress. Serving 200 request per second even on un-cached and heavy pages where PHP-FPM can only achieve 18 requests per second on a VM with the same resources (rendering the same un-cached pages).
MariaDB 10.1 MariaDB provides a solid database back-end and can easily be scaled out into a Galera Cluster for larger deployments. MariaDB 10.1 outperforms MySQL 5.7.4 by a significant margin, that is why it was chosen for this stack and it proved itself in implementation. MariaDB would perform better on SSD if available, but the above results were achieved on RAID10 7200RPM SATAIII with an LSI Megaraid BBU controller (512MB Cache).
Nginx Nginx can be somewhat less intuitive to configure then Apache. However it is a beast for serving static files especially per resource usage when configured correctly. Which is mostly what it does in this stack as all PHP processing is done by HHVM. Nginx really shines in serving static files to many user concurrently with the configuration we&amp;rsquo;ll outline in the coming articles.
Ubuntu 14.04 &amp;ldquo;Trusty Tahr&amp;rdquo; Choosing Ubuntu 14.04 for this deployment made sense, because it is LTS (5 years of support) and apt-get makes it almost trivial to get all of this setup. Not to mention that Ubuntu is a stable OS (although I usually prefer CentOS/RHEL). Nginx is built into the native repos for Ubuntu 14.04 and having maintained repos for both HHVM and MariaDB with Ubuntu 14.04 makes this stack easy to update later on. If you need an Ubuntu VPS you can get one for here. Before you get started with this you will probably want to secure your Ubuntu VPS.
WordPress 3.9.2 This series of articles will show you how to set all of this up and make it work with both a WordPress multi-site network, and a single WordPress site. I used the multi-site network with WP MU Domain Mapper and Nginx helper for ease of moving my multiple blogs and family/friends WordPress sites on to one platform. We will also be leveraging W3 Total Cache and APC (which is built in to HHVM) for Opcode caching.
Concluding the Introduction This setup is so efficient you wouldn&amp;rsquo;t need to scale out past a single VM instance unless you were in the Alexa top 10000, so we won&amp;rsquo;t handle that in this series. In articles to follow I will layout how to build this stack and use it for Lightning fast WordPress hosting on a shoestring budget. You&amp;rsquo;ll be able to handle 50,000 page loads an hour or more on a 2GB RAM Xen VM. I will update this article with links to the upcoming tutorials.
]]></content:encoded></item></channel></rss>
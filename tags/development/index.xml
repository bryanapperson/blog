<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><docs>https://blogs.law.harvard.edu/tech/rss</docs><title>development on Bryan Apperson</title><link>https://bryanapperson.com/tags/development/</link><description>Recent content in development on Bryan Apperson</description><image><title>development on Bryan Apperson</title><link>https://bryanapperson.com/tags/development/</link><url>https://source.unsplash.com/collection/983219/2000x1322</url></image><ttl>1440</ttl><generator>Hugo 0.81.0</generator><language>en-US</language><copyright>Copyright &amp;copy; Bryan Apperson. Licensed under CC-BY-ND-4.0. Hosted on Github.</copyright><lastBuildDate>Sun, 18 Apr 2021 20:56:59 UT</lastBuildDate><atom:link href="https://bryanapperson.com/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>HHVM, MariaDB and Nginx Make WordPress Fly - Intro</title><link>https://bryanapperson.com/blog/hhvm-mariadb-and-nginx-make-wordpress-fly-intro/</link><pubDate>Mon, 17 Feb 2020 20:17:30 UT</pubDate><dc:creator>Bryan Apperson</dc:creator><guid>https://bryanapperson.com/blog/hhvm-mariadb-and-nginx-make-wordpress-fly-intro/</guid><description>HHVM, MariaDB and Nginx Make WordPress fly (seriously). This site is running on what may the fastest possible software stack for WordPress. That stack is HHVM, MariaDB 10.1, Nginx and Ubuntu 14.04. As you are browsing this site you may notice that it is graphically intensive. It also leverages many CPU hungry plugins that would make it take 6-10 seconds to load on even good shared hosting. With this aforementioned software stack pages up to 5MB on this site still load in under a second, end-user pipe permitting.</description><content:encoded><![CDATA[HHVM, MariaDB and Nginx Make WordPress fly (seriously). This site is running on what may the fastest possible software stack for WordPress. That stack is HHVM, MariaDB 10.1, Nginx and Ubuntu 14.04. As you are browsing this site you may notice that it is graphically intensive. It also leverages many CPU hungry plugins that would make it take 6-10 seconds to load on even good shared hosting. With this aforementioned software stack pages up to 5MB on this site still load in under a second, end-user pipe permitting. This is all happening on a VPS with 2 x 2.26Ghz cores and 2GB of RAM. Not only that but this stack can serve over 1000 2MB WordPress pages per second without losing stability:
AB BenchMark [user@host ~]# ab -c 50 -n 5000 http://bryanapperson.com/ This is ApacheBench, Version 2.3 &amp;lt;$Revision: 655654 $&amp;gt; Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/ Benchmarking bryanapperson.com (be patient) Completed 500 requests Completed 1000 requests Completed 1500 requests Completed 2000 requests Completed 2500 requests Completed 3000 requests Completed 3500 requests Completed 4000 requests Completed 4500 requests Completed 5000 requests Finished 5000 requests Server Software: nginx Server Hostname: bryanapperson.com Server Port: 80 Document Path: / Document Length: 16138 bytes Concurrency Level: 50 Time taken for tests: 3.916 seconds Complete requests: 5000 Failed requests: 0 Write errors: 0 Total transferred: 83046606 bytes HTML transferred: 80706138 bytes Requests per second: 1276.68 \[#/sec\](mean) Time per request: 39.164 \[ms\](mean) Time per request: 0.783 \[ms\] (mean, across all concurrent requests) Transfer rate: 20707.77 \[Kbytes/sec\] received Connection Times (ms) min mean\[&#43;/-sd\] median max Connect: 1 1 0.2 1 5 Processing: 12 38 8.1 37 88 Waiting: 11 37 8.1 36 87 Total: 14 39 8.1 38 89 Percentage of the requests served within a certain time (ms) 50% 38 66% 41 75% 43 80% 44 90% 49 95% 54 98% 60 99% 66 100% 89 (longest request) Why HHVM for WordPress? So you may be asking yourself, is that really possible? Yes, HHVM and WordPress work very well together. If you asked me a few days ago I might have said no. But after playing around with HHVM, also known as &amp;ldquo;Hip Hop for PHP&amp;rdquo;, it is. HHVM is Facebook&amp;rsquo;s production PHP server which has now gone open source. At this point it still has a few compatibility issues. Especially with the usual culprits like Ioncube. However it works very well with WordPress 3.9&#43;. When combined with Nginx, MariaDB and Ubuntu &amp;ldquo;Trust Tahr&amp;rdquo; you get a pretty unbeatable platform for WordPress. Serving 200 request per second even on un-cached and heavy pages where PHP-FPM can only achieve 18 requests per second on a VM with the same resources (rendering the same un-cached pages).
MariaDB 10.1 MariaDB provides a solid database back-end and can easily be scaled out into a Galera Cluster for larger deployments. MariaDB 10.1 outperforms MySQL 5.7.4 by a significant margin, that is why it was chosen for this stack and it proved itself in implementation. MariaDB would perform better on SSD if available, but the above results were achieved on RAID10 7200RPM SATAIII with an LSI Megaraid BBU controller (512MB Cache).
Nginx Nginx can be somewhat less intuitive to configure then Apache. However it is a beast for serving static files especially per resource usage when configured correctly. Which is mostly what it does in this stack as all PHP processing is done by HHVM. Nginx really shines in serving static files to many user concurrently with the configuration we&amp;rsquo;ll outline in the coming articles.
Ubuntu 14.04 &amp;ldquo;Trusty Tahr&amp;rdquo; Choosing Ubuntu 14.04 for this deployment made sense, because it is LTS (5 years of support) and apt-get makes it almost trivial to get all of this setup. Not to mention that Ubuntu is a stable OS (although I usually prefer CentOS/RHEL). Nginx is built into the native repos for Ubuntu 14.04 and having maintained repos for both HHVM and MariaDB with Ubuntu 14.04 makes this stack easy to update later on. If you need an Ubuntu VPS you can get one for here. Before you get started with this you will probably want to secure your Ubuntu VPS.
WordPress 3.9.2 This series of articles will show you how to set all of this up and make it work with both a WordPress multi-site network, and a single WordPress site. I used the multi-site network with WP MU Domain Mapper and Nginx helper for ease of moving my multiple blogs and family/friends WordPress sites on to one platform. We will also be leveraging W3 Total Cache and APC (which is built in to HHVM) for Opcode caching.
Concluding the Introduction This setup is so efficient you wouldn&amp;rsquo;t need to scale out past a single VM instance unless you were in the Alexa top 10000, so we won&amp;rsquo;t handle that in this series. In articles to follow I will layout how to build this stack and use it for Lightning fast WordPress hosting on a shoestring budget. You&amp;rsquo;ll be able to handle 50,000 page loads an hour or more on a 2GB RAM Xen VM. I will update this article with links to the upcoming tutorials.
]]></content:encoded></item><item><title>Copy Ceph Pool Objects to Another Pool</title><link>https://bryanapperson.com/blog/copy-ceph-pool-objects-to-another-pool/</link><pubDate>Tue, 17 Nov 2015 23:06:18 UT</pubDate><dc:creator>Bryan Apperson</dc:creator><guid>https://bryanapperson.com/blog/copy-ceph-pool-objects-to-another-pool/</guid><description>Sometimes it is necessary to copy Ceph pool objects from one Ceph pool to another - such as when changing CRUSH/erasure rule sets on an expanding cluster. There is a built-in command in RADOS for doing this. However the command in question, rados cppool , has some limitations. It only seems to work with replicated target pools. Thus it cannot copy Ceph pool objects from a erasure pool to a replicated pool, or between erasure pools.</description><content:encoded><![CDATA[Sometimes it is necessary to copy Ceph pool objects from one Ceph pool to another - such as when changing CRUSH/erasure rule sets on an expanding cluster. There is a built-in command in RADOS for doing this. However the command in question, rados cppool , has some limitations. It only seems to work with replicated target pools. Thus it cannot copy Ceph pool objects from a erasure pool to a replicated pool, or between erasure pools. So to offer a utility for copying the contents of an erasure coded pool to another erasure pool, this evening I wrote up a function in my python-rados-utils repository. To use the python-rados-utils package, you first have to build and install it. At this point the repository only works with RHEL/CentOS/Fedora due to the RPM based build system. You can however look through the code for usage on other platforms. It&amp;rsquo;s pretty easy to get python-rados-utils up and running. Building from python-rados-utils from source:
git clone git@github.com:bryanapperson/python-rados-utils.git cd python-rados-utils rpmbuild -ba python-rados-utils.spec Installing python-rados-utils: The rpm from the build we just did will be output in ~/rpmbuild/RPMS/noarch/. Install the rpm using: rpm -Uvh &amp;lt;path-to-rpm&amp;gt; Once the python-rados-utils package is installed, using it to copy all objects from one Ceph pool to another is very straight-forward. In your favorite text editor, open up a file called copy_objects.py . In this file place:
# Optionally you can pass in the keyring and ceph.conf # locations as strings. thiscluster = common_utils.Cluster() # Replace these empty stings with your source and target pool names source = &amp;#39;&amp;#39; target = &amp;#39;&amp;#39; thiscluster.copy_pool(source, target) NOTE: Updated versions of the above snippet can be found here. This script is single threaded at the moment and synchronous. I may add asynchronous and multi-threading functionalities to speed up Ceph pool copy in the near future. This code comes with no warranty of any kind and the code is licensed under GPLv2. Test in your own environment, but for me this worked well to copy all objects in one pool to another. Please leave your thoughts in the comments below and commit back any cool stuff to the python-rados-utils repository.
]]></content:encoded></item></channel></rss>
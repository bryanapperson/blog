<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><docs>https://blogs.law.harvard.edu/tech/rss</docs><title>mariadb on Bryan Apperson</title><link>https://bryanapperson.com/tags/mariadb/</link><description>Recent content in mariadb on Bryan Apperson</description><image><title>mariadb on Bryan Apperson</title><link>https://bryanapperson.com/tags/mariadb/</link><url>https://source.unsplash.com/collection/983219/2000x1322</url></image><ttl>1440</ttl><generator>Hugo 0.81.0</generator><language>en-US</language><copyright>Copyright &amp;copy; Bryan Apperson. Licensed under CC-BY-ND-4.0. Hosted on Github.</copyright><lastBuildDate>Sun, 18 Apr 2021 20:56:59 UT</lastBuildDate><atom:link href="https://bryanapperson.com/tags/mariadb/index.xml" rel="self" type="application/rss+xml"/><item><title>MariaDB 10.1 Setup for Ubuntu 14.04 - Make WordPress Fly</title><link>https://bryanapperson.com/blog/mariadb-10-1-setup-for-ubuntu-14-04-make-wordpress-fly/</link><pubDate>Mon, 17 Feb 2020 20:35:53 UT</pubDate><dc:creator>Bryan Apperson</dc:creator><guid>https://bryanapperson.com/blog/mariadb-10-1-setup-for-ubuntu-14-04-make-wordpress-fly/</guid><description>In this tutorial we will cover optimal MariaDB 10.1 setup for Ubuntu 14.04 on a VM with 2-4GB of RAM. This is part 2 of the &amp;ldquo;Make WordPress Fly&amp;rdquo; tutorial. You can find part 1 here. Part 1 covered the benefits of using HHVM, MariaDB, Nginx and Ubuntu 14.04 to run a WordPress website. In this section we&amp;rsquo;ll be digging in to MariaDB and the optimal configurations for it. This tutorial assumes you have a VM with at least 512MB of RAM, 1 Xeon Core, 10 GB HDD and Vanilla Ubuntu 14.</description><content:encoded><![CDATA[In this tutorial we will cover optimal MariaDB 10.1 setup for Ubuntu 14.04 on a VM with 2-4GB of RAM. This is part 2 of the &amp;ldquo;Make WordPress Fly&amp;rdquo; tutorial. You can find part 1 here. Part 1 covered the benefits of using HHVM, MariaDB, Nginx and Ubuntu 14.04 to run a WordPress website. In this section we&amp;rsquo;ll be digging in to MariaDB and the optimal configurations for it. This tutorial assumes you have a VM with at least 512MB of RAM, 1 Xeon Core, 10 GB HDD and Vanilla Ubuntu 14.04 installed and ideally secured. So, assuming you have your Ubuntu VPS all setup, we will proceed with the fairly straightforward process of installing MariaDB on Ubuntu 14.04. We are specifically going to be deploying MariaDB 10.1 which as discussed in part 1 has significant performance benefits over even the newest versions on MySQL. First, connect to your VM via SSH.
ssh -p port user@you.rip.add.res
Then we&amp;rsquo;ll add the MariaDB 10.1 repository and install the prerequisites.
sudo apt-get install software-properties-common sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db sudo add-apt-repository &#39;deb http://ftp.osuosl.org/pub/mariadb/repo/10.1/ubuntu trusty main&#39; Once the key is imported and the repository added we will install MariaDB.
sudo apt-get update sudo apt-get install mariadb-server During that process you will be prompted to create a root password for MariaDB. Make sure that you store it in a safe place. Consider using KeePass (or a similar utility) for test passwords, it creates strong passwords you can review later and encrypts them with a master key. Now that MariaDB is installed we need to make sure it runs on startup.
sudo update-rc.d mysql defaults Then, run the sudo mysql_secure_installation. This will guide you through some procedures that will remove some defaults which are dangerous to use in a production environment.
Next we will want to check that everything looks good in the my.cnf file.
nano /etc/mysql/my.cnf It looks like this, yours should be similar, it may be a bit different as MariaDB does some system based configuration on installation.
socket	= /var/run/mysqld/mysqld.sock nice	= 0 [mysqld] # # * Basic Settings # user	= mysql pid-file	= /var/run/mysqld/mysqld.pid socket	= /var/run/mysqld/mysqld.sock port	= 3306 basedir	= /usr datadir	= /var/lib/mysql tmpdir	= /tmp lc_messages_dir	= /usr/share/mysql lc_messages	= en_US skip-external-locking # # Instead of skip-networking the default is now to listen only on # localhost which is more compatible and is not less secure. bind-address	= 127.0.0.1 # # * Fine Tuning # max_connections	= 100 connect_timeout	= 5 wait_timeout	= 600 max_allowed_packet	= 16M thread_cache_size = 128 sort_buffer_size	= 4M bulk_insert_buffer_size	= 16M tmp_table_size	= 32M max_heap_table_size	= 32M # # * MyISAM # # This replaces the startup script and checks MyISAM tables if needed # the first time they are touched. On error, make copy and try a repair. myisam_recover = BACKUP key_buffer_size	= 128M #open-files-limit	= 2000 table_open_cache	= 400 myisam_sort_buffer_size	= 512M concurrent_insert	= 2 read_buffer_size	= 2M read_rnd_buffer_size	= 1M # # * Query Cache Configuration # # Cache only tiny result sets, so we can fit more in the query cache. query_cache_limit	= 128K query_cache_size	= 64M # for more write intensive setups, set to DEMAND or OFF #query_cache_type	= DEMAND # # * Logging and Replication # # Both location gets rotated by the cronjob. # Be aware that this log type is a performance killer. # As of 5.1 you can enable the log at runtime! #general_log_file = /var/log/mysql/mysql.log #general_log = 1 # # Error logging goes to syslog due to /etc/mysql/conf.d/mysqld_safe_syslog.cnf. # # we do want to know about network errors and such log_warnings	= 2 # # Enable the slow query log to see queries with especially long duration #slow_query_log[={0|1}] slow_query_log_file	= /var/log/mysql/mariadb-slow.log long_query_time = 10 #log_slow_rate_limit	= 1000 log_slow_verbosity	= query_plan #log-queries-not-using-indexes #log_slow_admin_statements # # The following can be used as easy to replay backup logs or for replication. # note: if you are setting up a replication slave, see README.Debian about # other settings you may need to change. #server-id	= 1 #report_host	= master1 #auto_increment_increment = 2 #auto_increment_offset	= 1 log_bin	= /var/log/mysql/mariadb-bin log_bin_index	= /var/log/mysql/mariadb-bin.index # not fab for performance, but safer #sync_binlog	= 1 expire_logs_days	= 10 max_binlog_size = 100M # slaves #relay_log	= /var/log/mysql/relay-bin #relay_log_index	= /var/log/mysql/relay-bin.index #relay_log_info_file	= /var/log/mysql/relay-bin.info #log_slave_updates #read_only # # If applications support it, this stricter sql_mode prevents some # mistakes like inserting invalid dates etc. #sql_mode	= NO_ENGINE_SUBSTITUTION,TRADITIONAL # # * InnoDB # # InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/. # Read the manual for more InnoDB related options. There are many! default_storage_engine	= InnoDB # you can&amp;#39;t just change log file size, requires special procedure #innodb_log_file_size	= 50M innodb_buffer_pool_size	= 256M innodb_log_buffer_size	= 8M innodb_file_per_table	= 1 innodb_open_files	= 400 innodb_io_capacity	= 400 innodb_flush_method	= O_DIRECT # # * Security Features # # Read the manual, too, if you want chroot! # chroot = /var/lib/mysql/ # # For generating SSL certificates I recommend the OpenSSL GUI &amp;#34;tinyca&amp;#34;. # # ssl-ca=/etc/mysql/cacert.pem # ssl-cert=/etc/mysql/server-cert.pem # ssl-key=/etc/mysql/server-key.pem [mysqldump] quick quote-names max_allowed_packet	= 16M [mysql] #no-auto-rehash	# faster start of mysql but no tab completition [isamchk] key_buffer	= 16M # # * IMPORTANT: Additional settings that can override those from this file! # The files must end with &amp;#39;.cnf&amp;#39;, otherwise they&amp;#39;ll be ignored. # !includedir /etc/mysql/conf.d/&amp;lt;/pre&amp;gt; Performance can be tweaked a bit once we&amp;rsquo;ve had the WordPress site up and running for 24-48 hours by using mysqltuner.pl. For good measure restart the service.
sudo service mysql restart
This concludes part 2 of the guide &amp;ldquo;MariaDB Setup for Ubuntu 14.04 - Make WordPress Fly&amp;rdquo;. As the rest of the guide is released links will be posted here and on all of the articles in the tutorial.
]]></content:encoded></item><item><title>HHVM, MariaDB and Nginx Make WordPress Fly - Intro</title><link>https://bryanapperson.com/blog/hhvm-mariadb-and-nginx-make-wordpress-fly-intro/</link><pubDate>Mon, 17 Feb 2020 20:17:30 UT</pubDate><dc:creator>Bryan Apperson</dc:creator><guid>https://bryanapperson.com/blog/hhvm-mariadb-and-nginx-make-wordpress-fly-intro/</guid><description>HHVM, MariaDB and Nginx Make WordPress fly (seriously). This site is running on what may the fastest possible software stack for WordPress. That stack is HHVM, MariaDB 10.1, Nginx and Ubuntu 14.04. As you are browsing this site you may notice that it is graphically intensive. It also leverages many CPU hungry plugins that would make it take 6-10 seconds to load on even good shared hosting. With this aforementioned software stack pages up to 5MB on this site still load in under a second, end-user pipe permitting.</description><content:encoded><![CDATA[HHVM, MariaDB and Nginx Make WordPress fly (seriously). This site is running on what may the fastest possible software stack for WordPress. That stack is HHVM, MariaDB 10.1, Nginx and Ubuntu 14.04. As you are browsing this site you may notice that it is graphically intensive. It also leverages many CPU hungry plugins that would make it take 6-10 seconds to load on even good shared hosting. With this aforementioned software stack pages up to 5MB on this site still load in under a second, end-user pipe permitting. This is all happening on a VPS with 2 x 2.26Ghz cores and 2GB of RAM. Not only that but this stack can serve over 1000 2MB WordPress pages per second without losing stability:
AB BenchMark [user@host ~]# ab -c 50 -n 5000 http://bryanapperson.com/ This is ApacheBench, Version 2.3 &amp;lt;$Revision: 655654 $&amp;gt; Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/ Benchmarking bryanapperson.com (be patient) Completed 500 requests Completed 1000 requests Completed 1500 requests Completed 2000 requests Completed 2500 requests Completed 3000 requests Completed 3500 requests Completed 4000 requests Completed 4500 requests Completed 5000 requests Finished 5000 requests Server Software: nginx Server Hostname: bryanapperson.com Server Port: 80 Document Path: / Document Length: 16138 bytes Concurrency Level: 50 Time taken for tests: 3.916 seconds Complete requests: 5000 Failed requests: 0 Write errors: 0 Total transferred: 83046606 bytes HTML transferred: 80706138 bytes Requests per second: 1276.68 \[#/sec\](mean) Time per request: 39.164 \[ms\](mean) Time per request: 0.783 \[ms\] (mean, across all concurrent requests) Transfer rate: 20707.77 \[Kbytes/sec\] received Connection Times (ms) min mean\[&#43;/-sd\] median max Connect: 1 1 0.2 1 5 Processing: 12 38 8.1 37 88 Waiting: 11 37 8.1 36 87 Total: 14 39 8.1 38 89 Percentage of the requests served within a certain time (ms) 50% 38 66% 41 75% 43 80% 44 90% 49 95% 54 98% 60 99% 66 100% 89 (longest request) Why HHVM for WordPress? So you may be asking yourself, is that really possible? Yes, HHVM and WordPress work very well together. If you asked me a few days ago I might have said no. But after playing around with HHVM, also known as &amp;ldquo;Hip Hop for PHP&amp;rdquo;, it is. HHVM is Facebook&amp;rsquo;s production PHP server which has now gone open source. At this point it still has a few compatibility issues. Especially with the usual culprits like Ioncube. However it works very well with WordPress 3.9&#43;. When combined with Nginx, MariaDB and Ubuntu &amp;ldquo;Trust Tahr&amp;rdquo; you get a pretty unbeatable platform for WordPress. Serving 200 request per second even on un-cached and heavy pages where PHP-FPM can only achieve 18 requests per second on a VM with the same resources (rendering the same un-cached pages).
MariaDB 10.1 MariaDB provides a solid database back-end and can easily be scaled out into a Galera Cluster for larger deployments. MariaDB 10.1 outperforms MySQL 5.7.4 by a significant margin, that is why it was chosen for this stack and it proved itself in implementation. MariaDB would perform better on SSD if available, but the above results were achieved on RAID10 7200RPM SATAIII with an LSI Megaraid BBU controller (512MB Cache).
Nginx Nginx can be somewhat less intuitive to configure then Apache. However it is a beast for serving static files especially per resource usage when configured correctly. Which is mostly what it does in this stack as all PHP processing is done by HHVM. Nginx really shines in serving static files to many user concurrently with the configuration we&amp;rsquo;ll outline in the coming articles.
Ubuntu 14.04 &amp;ldquo;Trusty Tahr&amp;rdquo; Choosing Ubuntu 14.04 for this deployment made sense, because it is LTS (5 years of support) and apt-get makes it almost trivial to get all of this setup. Not to mention that Ubuntu is a stable OS (although I usually prefer CentOS/RHEL). Nginx is built into the native repos for Ubuntu 14.04 and having maintained repos for both HHVM and MariaDB with Ubuntu 14.04 makes this stack easy to update later on. If you need an Ubuntu VPS you can get one for here. Before you get started with this you will probably want to secure your Ubuntu VPS.
WordPress 3.9.2 This series of articles will show you how to set all of this up and make it work with both a WordPress multi-site network, and a single WordPress site. I used the multi-site network with WP MU Domain Mapper and Nginx helper for ease of moving my multiple blogs and family/friends WordPress sites on to one platform. We will also be leveraging W3 Total Cache and APC (which is built in to HHVM) for Opcode caching.
Concluding the Introduction This setup is so efficient you wouldn&amp;rsquo;t need to scale out past a single VM instance unless you were in the Alexa top 10000, so we won&amp;rsquo;t handle that in this series. In articles to follow I will layout how to build this stack and use it for Lightning fast WordPress hosting on a shoestring budget. You&amp;rsquo;ll be able to handle 50,000 page loads an hour or more on a 2GB RAM Xen VM. I will update this article with links to the upcoming tutorials.
]]></content:encoded></item></channel></rss>